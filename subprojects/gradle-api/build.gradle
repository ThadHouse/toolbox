/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.jfrog.bintray.gradle.tasks.BintrayUploadTask
import org.gradle.api.publish.maven.internal.artifact.FileBasedMavenArtifact

import java.text.SimpleDateFormat

plugins {
    id 'dev.gradleplugins.build.gradle-api-jars'
    id 'com.jfrog.bintray'
    id 'maven-publish'
}

version = '6.2.2'

subprojects {
    apply plugin: 'dev.gradleplugins.gradle-api-jar'
}

// Temporary workaround for https://github.com/bintray/gradle-bintray-plugin/issues/229
PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
project.tasks.withType(BintrayUploadTask).configureEach {
    doFirst {
        publishing.publications.withType(MavenPublication).each { publication ->
            File moduleFile = project.buildDir.toPath()
                    .resolve("publications/${publication.name}/module.json").toFile()

            if (moduleFile.exists()) {
                publication.artifact(new FileBasedMavenArtifact(moduleFile) {
                    @Override
                    protected String getDefaultExtension() {
                        return "module"
                    }
                })
            }
        }
    }
}

private String resolveProperty(Project project, String envVarKey, String projectPropKey) {
    Object propValue = System.getenv().get(envVarKey);

    if (propValue != null) {
        return propValue.toString();
    }

    propValue = project.findProperty(projectPropKey);
    if (propValue != null) {
        return propValue.toString();
    }

    return null;
}


afterEvaluate {
    bintray {
        user = resolveProperty(project, "BINTRAY_USER", "dev.gradleplugins.bintray.user")
        key = resolveProperty(project, "BINTRAY_KEY", "dev.gradleplugins.bintray.key")
        publications = publishing.publications.collect { it.name }

        publish = true
        override = true // only for snapshot

        pkg {
            repo = 'distributions'
            name = 'dev.gradleplugins:gradle-api'
            desc = project.description
            userOrg = 'gradle-plugins'
            websiteUrl = 'https://nokee.dev'
            issueTrackerUrl = 'https://github.com/gradle-plugins/toolbox/issues'
            vcsUrl = 'https://github.com/gradle-plugins/toolbox.git'
            labels = ['gradle', 'gradle-api', 'gradle-plugins']
            licenses = ['Apache-2.0']
            publicDownloadNumbers = false

            version {
                released = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZZ").format(new Date())
                // TODO: Sign artifacts
                gpg {
                    sign = false
                    passphrase = resolveProperty(project, "GPG_PASSPHRASE", "dev.gradleplugins.bintray.gpgPassphrase")
                }
            }
        }
    }
}
